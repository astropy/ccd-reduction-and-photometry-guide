Traceback (most recent call last):
  File "/usr/share/miniconda/envs/test/lib/python3.11/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/usr/share/miniconda/envs/test/lib/python3.11/site-packages/nbclient/client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/share/miniconda/envs/test/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/share/miniconda/envs/test/lib/python3.11/asyncio/base_events.py", line 653, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/usr/share/miniconda/envs/test/lib/python3.11/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/usr/share/miniconda/envs/test/lib/python3.11/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/usr/share/miniconda/envs/test/lib/python3.11/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
fig = plt.figure(figsize=(8, 2.5))
sub_figs = fig.subfigures(nrows=2, ncols=4, wspace=0.01, hspace=0.01)

cutout_size = 60
rng = np.random.default_rng(seed=8675309)
srcs = rng.permutation(sources_findpeaks)[:len(sub_figs.flatten())]
for a_fig, src in zip(sub_figs.flatten(), srcs):
    sub_axs = a_fig.subplot_mosaic([["orig", "segm"]], sharex=True, sharey=True, )
    left = int(src['x_peak'] - cutout_size)
    bottom = int(src['y_peak'] - cutout_size)
    right = left + 2 * cutout_size
    top = bottom + 2 * cutout_size
    slc = (slice(bottom, top), slice(left, right))
    sources_in_cutout_fp = ((left < sources_findpeaks["x_centroid"]) & (sources_findpeaks["x_centroid"] < right) &
                             (bottom < sources_findpeaks["y_centroid"]) & (sources_findpeaks["y_centroid"] < top))
    sources_in_cutout_dao = ((left < sources_dao["xcentroid"]) & (sources_dao["xcentroid"] < right) &
                             (bottom < sources_dao["ycentroid"]) & (sources_dao["ycentroid"] < top))
    sub_axs["orig"].imshow(xdf_image.data[slc], cmap=cmap, norm=norm_image, origin="lower")
    sub_axs["orig"].scatter(sources_findpeaks["x_centroid"][sources_in_cutout_fp] - left, 
                            sources_findpeaks["y_centroid"][sources_in_cutout_fp] - bottom, 
                            marker="x", color="orange", s=100, label="Find peaks")
    sub_axs["orig"].scatter(sources_dao["xcentroid"][sources_in_cutout_dao] - left, 
                            sources_dao["ycentroid"][sources_in_cutout_dao] - bottom, 
                            marker="s", facecolor="none", edgecolor="cyan", s=200, 
                            alpha=0.5, label="DAOFind")

    sub_axs["segm"].imshow(segm.data[slc], cmap=rand_cmap, vmin=1, vmax=len(sources_findpeaks), origin="lower")
    src_id = src["source_id"]
    # ax.text(2, 2, str(src_id), color='w', va='top')
    a_fig.suptitle(f"Source {src_id}", fontsize=10)

    for ax in sub_axs.values():
        ax.set_xticks([])
        ax.set_yticks([])

fig.suptitle("'Source detection method comparison", y=1.1)
a_fig.legend(ncols=2, bbox_to_anchor=(-.2, 0.2));
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[12], line 27[0m
[1;32m     19[0m sub_axs[[38;5;124m"[39m[38;5;124morig[39m[38;5;124m"[39m][38;5;241m.[39mscatter(sources_findpeaks[[38;5;124m"[39m[38;5;124mx_centroid[39m[38;5;124m"[39m][sources_in_cutout_fp] [38;5;241m-[39m left, 
[1;32m     20[0m                         sources_findpeaks[[38;5;124m"[39m[38;5;124my_centroid[39m[38;5;124m"[39m][sources_in_cutout_fp] [38;5;241m-[39m bottom, 
[1;32m     21[0m                         marker[38;5;241m=[39m[38;5;124m"[39m[38;5;124mx[39m[38;5;124m"[39m, color[38;5;241m=[39m[38;5;124m"[39m[38;5;124morange[39m[38;5;124m"[39m, s[38;5;241m=[39m[38;5;241m100[39m, label[38;5;241m=[39m[38;5;124m"[39m[38;5;124mFind peaks[39m[38;5;124m"[39m)
[1;32m     22[0m sub_axs[[38;5;124m"[39m[38;5;124morig[39m[38;5;124m"[39m][38;5;241m.[39mscatter(sources_dao[[38;5;124m"[39m[38;5;124mxcentroid[39m[38;5;124m"[39m][sources_in_cutout_dao] [38;5;241m-[39m left, 
[1;32m     23[0m                         sources_dao[[38;5;124m"[39m[38;5;124mycentroid[39m[38;5;124m"[39m][sources_in_cutout_dao] [38;5;241m-[39m bottom, 
[1;32m     24[0m                         marker[38;5;241m=[39m[38;5;124m"[39m[38;5;124ms[39m[38;5;124m"[39m, facecolor[38;5;241m=[39m[38;5;124m"[39m[38;5;124mnone[39m[38;5;124m"[39m, edgecolor[38;5;241m=[39m[38;5;124m"[39m[38;5;124mcyan[39m[38;5;124m"[39m, s[38;5;241m=[39m[38;5;241m200[39m, 
[1;32m     25[0m                         alpha[38;5;241m=[39m[38;5;241m0.5[39m, label[38;5;241m=[39m[38;5;124m"[39m[38;5;124mDAOFind[39m[38;5;124m"[39m)
[0;32m---> 27[0m sub_axs[[38;5;124m"[39m[38;5;124msegm[39m[38;5;124m"[39m][38;5;241m.[39mimshow(segm[38;5;241m.[39mdata[slc], cmap[38;5;241m=[39m[43mrand_cmap[49m, vmin[38;5;241m=[39m[38;5;241m1[39m, vmax[38;5;241m=[39m[38;5;28mlen[39m(sources_findpeaks), origin[38;5;241m=[39m[38;5;124m"[39m[38;5;124mlower[39m[38;5;124m"[39m)
[1;32m     28[0m src_id [38;5;241m=[39m src[[38;5;124m"[39m[38;5;124msource_id[39m[38;5;124m"[39m]
[1;32m     29[0m [38;5;66;03m# ax.text(2, 2, str(src_id), color='w', va='top')[39;00m

[0;31mNameError[0m: name 'rand_cmap' is not defined

